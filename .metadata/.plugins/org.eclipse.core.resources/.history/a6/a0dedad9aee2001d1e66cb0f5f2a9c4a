package binary_tree;

import java.util.*;

class Node {
	int val;
	Node left, right;
	Node(int val) {
		this.val = val;
		this.left = null;
		this.right = null;
	}
}

public class BinaryTree {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Stack<Node> stack = new Stack<>();
		System.out.println("Enter the root value:");
		int rootVal = sc.nextInt();
		Node root = new Node(rootVal);
		stack.push(root);
		while (!stack.isEmpty()) {
			Node currNode = stack.pop();
			System.out.println("Enter the left child of " + currNode.val + " (or -1 if no left child):");
			int leftVal = sc.nextInt();
			if (leftVal != -1) {
				currNode.left = new Node(leftVal);
				stack.push(currNode.left);
			}
			System.out.println("Enter the right child of " + currNode.val + " (or -1 if no right child):");
			int rightVal = sc.nextInt();
			if (rightVal != -1) {
				currNode.right = new Node(rightVal);
				stack.push(currNode.right);
			}
		}
		System.out.println("Nodes in level order:");
		printLevelOrder(root);
	}

	public static void printLevelOrder(Node root) {
		Queue<Node> queue = new LinkedList<>();
		queue.add(root);
		while (!queue.isEmpty()) {
			int levelSize = queue.size();
			for (int i = 0; i < levelSize; i++) {
				Node currNode = queue.poll();
				System.out.print(currNode.val + " ");
				if (currNode.left != null) {
					queue.add(currNode.left);
				}
				if (currNode.right != null) {
					queue.add(currNode.right);
				}
			}
			System.out.println();
		}
	}
}
